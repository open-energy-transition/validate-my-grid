meta {
	title: "Power QA";
	version: "0.1";
	description: "Validation ruleset for power features";
	author: "nlehuby";
}


way[power=~/line|minor_line|cable/] > node[power=~/tower|pole|insulator|portal|terminal/] {
	set .connected_ok_supports;
} 

node[power=~/tower|pole/]!.connected_ok_supports {
	throwWarning: "[Power] Lone power tower or pole. Try to connect it to a power=line";
}

node[power=~/insulator|portal/]!.connected_ok_supports {
	throwWarning: "[Power] Lone power portal or insulator. Try to connect it to a power=line";
}

node[power=~/terminal/]!.connected_ok_supports {
	throwWarning: "[Power] Lone power terminal. Try to connect it to a power=line";
}


way[power=~/line|minor_line|cable/] >[index=-1] node[power],
way[power=~/line|minor_line|cable/] >[index=1] node[power] {
	set .end_of_power_lines;
} 

node.end_of_power_lines!:connection[power!~/transformer|generator|portal|terminal|insulator/][location:transition!=yes][substation!=minor_distribution][transformer!~/distribution|main/][line_management!~/transition|termination/] {
	throwWarning: "[Power] Unfinished power line";
}

node.end_of_power_lines:connection[count(parent_tags("voltage")) > 1][power!=transformer][!transformer] {
	throwWarning: "[Power] Connection between different voltages";
}

node.end_of_power_lines:connection[count(parent_tags("cables")) > 1][line_management!=split] {
	throwWarning: "[Power] Connection between different number of cables. Check the cables on incoming lines and the line_management tag on the intersecting tower";
}

area[power=substation] âˆˆ area[power=substation] {
	throwError: "[Power] Substation inside another substation";
}

*[power][power!~/cable|catenary_mast|circuit|compensator|connection|converter|generator|heliostat|insulator|inverter|line|minor_line|plant|pole|portal|substation|switch|switchgear|terminal|tower|transformer/] {
	throwError: "[Power] Unsuitable value for power=* tag";
}

way!:closed[power=substation],
relation[power=substation] {
	throwError: "[Power] power=substation must be a node or an area";
}

node[power=cable],
area:closed[power=cable] {
	throwError: "[Power] power=cable must be a way";
}

node[power=minor_line],
area:closed[power=minor_line] {
	throwError: "[Power] power=minor_line must be a way";
}

way[power=circuit],
node[power=circuit],
area:closed[power=circuit] {
	throwError: "[Power] power=circuit must be a relation";
}

area:closed[power=portal],
relation[power=portal] {
	throwError: "[Power] power=portal must be a node or an way";
}

area:closed[power=insulator],
relation[power=insulator] {
	throwError: "[Power] power=insulator must be a node or an way";
}

way[power=~/line|minor_line|cable/][circuits][circuits !~ /^[0-9]+$/] {
	throwError: "[Power] circuits tag should contain a number";
}

way[power=~/line|minor_line|cable/][cables][cables !~ /^[0-9]+$/] {
	throwError: "[Power] cables tag should contain a number";
}

node[power=transformer][!frequency] {
    throwWarning: "[Power] Transformers should have a frequency tag";
    assertMatch: "node power=transformer";
    assertNoMatch: "node power=transformer frequency=50";
}