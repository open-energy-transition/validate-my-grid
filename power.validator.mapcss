meta {
	title: "Power QA";
	version: "0.2";
	description: "Validation ruleset for power features (power=*)";
	icon: "MapYourGrid-favicon.png";
	author: "nlehuby";
	link: "https://wiki.openstreetmap.org/wiki/Power_networks/Quality_Assurance";
	baselanguage: "en";
	-osmoseTags: list("tag", "power");
}

meta[lang=en] /* unused meta, only set so that tr() can catch string for translation */
{
	description: tr("Validation ruleset for power features (power=*)");
}
meta[lang=fr]
{
	description: "Règles de validation pour les réseaux électriques (power=*)";
}


way[power=~/line|minor_line|cable/] > node[power=~/tower|pole|insulator|portal|terminal/] {
	set .connected_ok_supports;
} 

node[power=~/tower|pole/]!.connected_ok_supports {
	throwWarning: tr("Lone power tower or pole. Try to connect it to a power=line");
}

node[power=~/insulator|portal/]!.connected_ok_supports {
	throwWarning: tr("Lone power portal or insulator. Try to connect it to a power=line");
}

node[power=~/terminal/]!.connected_ok_supports {
	throwWarning: tr("Lone power terminal. Try to connect it to a power=line");
}


way[power=~/line|minor_line|cable/] >[index=-1] node[power],
way[power=~/line|minor_line|cable/] >[index=1] node[power] {
	set .end_of_power_lines;
} 

node.end_of_power_lines!:connection[power!~/transformer|generator|portal|terminal|insulator/][location:transition!=yes][substation!=minor_distribution][transformer!~/distribution|main/][line_management!~/transition|termination/] {
	throwWarning: tr("Unfinished power line");
}

node.end_of_power_lines:connection[count(parent_tags("voltage")) > 1][power!=transformer][!transformer] {
	throwWarning: tr("Connection between different voltages");
}

node.end_of_power_lines:connection[count(parent_tags("cables")) > 1][line_management!=split] {
	throwWarning: tr("Connection between different number of cables. Check the cables on incoming lines and the line_management tag on the intersecting tower");
}

area[power=substation] ∈ area[power=substation] {
	throwError: tr("Substation inside another substation");
}

/* does not work, not sure why ... */
/*
way[power=portal] ∈ area[power=substation],
node[power=portal] ∈ area[power=substation] {
	set .portal_in_substation;
}

node[power=portal]!.portal_in_substation {
	throwError: tr("Power portal outside substation");	
}
*/

*[power][power!~/cable|catenary_mast|circuit|compensator|connection|converter|generator|heliostat|insulator|inverter|line|minor_line|plant|pole|portal|substation|switch|switchgear|terminal|tower|transformer/] {
	throwError: tr("Unsuitable value for power=* tag");
}

way!:closed[power=substation],
relation[power=substation] {
	throwError: tr("power=substation must be a node or an area");
}

node[power=cable],
area:closed[power=cable] {
	throwError: tr("power=cable must be a way");
}

node[power=minor_line],
area:closed[power=minor_line] {
	throwError: tr("power=minor_line must be a way");
}

way[power=circuit],
node[power=circuit],
area:closed[power=circuit] {
	throwError: tr("power=circuit must be a relation");
}

area:closed[power=portal],
relation[power=portal] {
	throwError: tr("power=portal must be a node or an way");
}

area:closed[power=insulator],
relation[power=insulator] {
	throwError: tr("power=insulator must be a node or an way");
}

way[power=~/line|minor_line|cable/][circuits][circuits !~ /^[0-9]+$/] {
	throwError: tr("circuits tag should contain a number");
}

way[power=~/line|minor_line|cable/][cables][cables !~ /^[0-9]+$/] {
	throwError: tr("cables tag should contain a number");
}

node[power=transformer][!frequency] {
    throwWarning: tr("Transformers should have a frequency tag");
    assertMatch: "node power=transformer";
    assertNoMatch: "node power=transformer frequency=50";
}

way[!power] > node[power=~/tower|pole|insulator|portal/] {
	throwError: tr("Power support connected to a non power feature");
}

node[power=~/tower|pole/] ∈ area[building] {
	throwError: tr("Power tower or pole inside a building");	
}


way[power=portal] > node {
	set .portal_nodes;
}

way[power=~/line|minor_line|cable/] >[index=-1] node,
way[power=~/line|minor_line|cable/] >[index=1] node {
	set .end_node_of_power_lines;
}

node.portal_nodes.end_node_of_power_lines[power!=insulator] {
	throwError: tr("A power line connecting to a portal should have a power=insulator on the connecting node");
	fixAdd: "power=insulator";
}